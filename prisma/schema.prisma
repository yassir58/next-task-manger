// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgres"
//   // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//   // Further reading:
//   // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//   // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//   url      = env("DATABASE_URL")
// }


datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String           @id @default(uuid())
  name               String           @unique @db.VarChar(255)
  email              String           @unique
  password           String
  profileImage       String?
  createAt           DateTime         @default(now())
  updateAt           DateTime         @default(now())
  accounts           Account[]
  sessions           Session[]
  SendInvitations    Invitation[]     @relation("Owner")
  ReceivedInvitation Invitation[]     @relation("Receiver")
  workspaces         Workspace[]      @relation("UserWorkspaces")
  Post               Post[]
  UserWorkspaces     UserWorkspaces[]
}

model Workspace {
  id             String           @id @default(uuid())
  name           String
  image          String
  visibility     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  ownerId        String
  Boards         Board[]          @relation("boards")
  members        User[]           @relation("UserWorkspaces")
  UserWorkspaces UserWorkspaces[]
}

model UserWorkspaces {
  userId      String
  workspaceId String

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
  @@index([workspaceId])
}

model Board {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255)
  createAt    DateTime   @default(now())
  updateAt    DateTime   @default(now())
  columns     Column[]
  workspaceId String?
  workspace   Workspace? @relation("boards", fields: [workspaceId], references: [id])

  @@map(name: "boards")
}

model Column {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  color     String
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  Task      Task[]
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
}

model Task {
  id           String        @id @default(cuid())
  coverImage   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  content      String        @db.Text
  Description  String        @db.Text
  status       String        @db.Text
  columnId     String
  column       Column        @relation(fields: [columnId], references: [id])
  SubTask      SubTask[]
  Comments     Comment[]
  Attachements Attachement[]

  @@map(name: "tasks")
}

model SubTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  content   String   @db.Text
  done      Boolean
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  @@map(name: "subtasks")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  content   String   @db.Text
  userId    String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
}

model Attachement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String   @db.Text
  path      String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
}

model Invitation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())
  ownerId     String
  receiverId  String
  workspaceId String
  owner       User     @relation("Owner", fields: [ownerId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
}
