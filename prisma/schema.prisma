// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id       String    @id @default(uuid())
  name     String    @unique @db.VarChar(255)
  email    String    @unique
  password String
  createAt DateTime  @default(now())
  updateAt DateTime  @default(now())
  Boards   Board[]
  accounts Account[]
  sessions Session[]
  Post     Post[]

  @@map(name: "users")
}

model Board {
  id       String   @id @default(uuid())
  name     String   @db.VarChar(255)
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  Task     Task[]

  @@map(name: "boards")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  content   String   @db.Text
  status    String   @db.Text
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])

  @@map(name: "tasks")
}
